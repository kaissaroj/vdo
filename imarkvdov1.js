function $imarkVideo(){return this.methods={},this.thirdPartyJS=["https://webrtc.github.io/adapter/adapter-latest.js","https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.3.1/peerjs.min.js","https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.1/socket.io.js"],this.myStream=!1,this.mic_switch=!0,this.video_switch=!0,this.videoContainer=[],this.room=null,this.domSelectorId={me:null,other:null},this.settings={},this.myPeer=null,this.socket=null,this.peers=[],this.myUserData={},this.pullJS=(e=>{for(let i=0;i<this.thirdPartyJS.length;i++){var t=this.thirdPartyJS[i];Helpers().injectScript(t).then(()=>{i==this.thirdPartyJS.length-1&&setTimeout(()=>{e()},10)}).catch(function(e){throw Error(e)})}}),this.initializeSocketEvents=(()=>{this.socket.on("connect",()=>{console.log("socket connected")}),this.socket.on("user-disconnected",e=>{console.log("user disconnected-- closing peers",e),this.peers[e]&&this.peers[e].close(),Helpers().removeVideo(e,this.videoContainer,e=>{this.videoContainer=e})}),this.socket.on("disconnect",()=>{console.log("socket disconnected --")}),this.socket.on("error",e=>{console.log("socket error --",e)})}),this.initializePeersEvents=(()=>{this.myPeer.on("open",e=>{myID=e;const t={userID:e,roomID:this.room};console.log("peers established and joined room",t),this.setNavigatorToStream(t)}),this.myPeer.on("error",e=>{console.error("peer connection error",e),this.myPeer.reconnect()})}),this.setPeersListeners=(e=>{this.myPeer.on("call",t=>{console.log("----peer---- answered ",t.metadata.id),t.answer(e),t.on("stream",e=>{console.log(" ---- user incoming stream --- ",e),Helpers().createVideo({id:t.metadata.id,stream:e},this.domSelectorId.other,!1,this.videoContainer,e=>{this.videoContainer=e})}),t.on("close",()=>{console.log("closing peers listeners",t.metadata.id),Helpers().removeVideo(t.metadata.id,this.videoContainer,e=>{this.videoContainer=e})}),t.on("error",()=>{console.log("peer error ------"),Helpers().removeVideo(t.metadata.id,this.videoContainer,e=>{this.videoContainer=e})}),this.peers[t.metadata.id]=t})}),this.setNavigatorToStream=(async e=>{this.myStream=await Helpers().getVideoAudioStream(),this.myUserData=e,this.myStream&&(this.socket.emit("join-room",e),Helpers().createVideo({id:e.userID,stream:this.myStream},this.domSelectorId.me,!0,this.videoContainer,e=>{this.videoContainer=e}),this.setPeersListeners(this.myStream),this.newUserConnection(this.myStream))}),this.newUserConnection=(e=>{this.socket.on("new-user-connect",t=>{console.log("New User Connected",t),this.connectToNewUser(t,e)})}),this.connectToNewUser=((e,t)=>{const{userID:i}=e;console.log("=====connectToNewUser=====",i);const o=this.myPeer.call(i,t,{metadata:{id:myID}});console.log("get ---- call ------"),o.on("stream",o=>{console.log("connectToNewUser ---- stream ------",t),Helpers().createVideo({id:i,stream:o,userData:e},this.domSelectorId.other,!1,this.videoContainer,e=>{this.videoContainer=e})}),o.on("close",()=>{console.log("closing new user",i),Helpers().removeVideo(i,this.videoContainer,e=>{this.videoContainer=e})}),o.on("error",()=>{console.log("peer error ------"),Helpers().removeVideo(i,this.videoContainer,e=>{this.videoContainer=e})}),this.peers[i]=o}),this.methods.init=(({room:e="",video:t=!0,audio:i=!0,videoSettings:o={},meSelectorid:s,otherSelectorid:r},n)=>{try{this.room=e,this.domSelectorId={me:s,other:r},this.settings={video:t,audio:i,videoSettings:"object"==typeof o&&Object.values(o).length?o:{frameRate:12,noiseSuppression:!0,width:{min:640,ideal:640,max:640},height:{min:480,ideal:640,max:640}}},this.pullJS(n)}catch(e){throw Error(e)}}),this.methods.start=(()=>{this.myPeer=Helpers().initializePeerConnection(),this.socket=Helpers().initializeSocketConnection(),this.initializeSocketEvents(),this.initializePeersEvents()}),this.methods.toggleMic=((e={})=>{null!=this.myStream&&this.myStream.getAudioTracks().length>0&&(this.mic_switch=!this.mic_switch,this.myStream.getAudioTracks()[0].enabled=this.mic_switch,"function"==typeof e&&e(this.mic_switch))}),this.methods.toggleVideo=((e={})=>{null!=this.myStream&&this.myStream.getVideoTracks().length>0&&(this.video_switch=!this.video_switch,this.myStream.getVideoTracks()[0].enabled=this.video_switch,"function"==typeof e&&e(this.video_switch))}),this.methods.leave=(()=>{const{userID:e}=this.myUserData;Helpers().removeVideo(e,this.videoContainer,e=>{this.videoContainer=e}),this.socket.disconnect(),this.peers[e]&&this.peers[e].close()}),this.methods.reconnect=(()=>{this.myPeer=Helpers().initializePeerConnection(),this.socket=Helpers().initializeSocketConnection(),this.initializeSocketEvents(),this.initializePeersEvents()}),this.methods}function Helpers(){return{injectScript:function(e){return new Promise((t,i)=>{const o=document.createElement("script");o.src=e,o.addEventListener("load",t),o.addEventListener("error",e=>i(e.error)),document.head.appendChild(o)})},getVideoAudioStream:async(e=!0,t=!0,i=null)=>{return await navigator.mediaDevices.getUserMedia({video:!!e&&{frameRate:12,noiseSuppression:!0,width:{min:640,ideal:640,max:640},height:{min:480,ideal:640,max:640}},audio:t})},createVideo:function(e,t,i,o,s){if(o[e.id])document.getElementById(e.id)&&(document.getElementById(e.id).srcObject=e.stream);else{o[e.id]={...e};const s=document.getElementById(t),r=document.createElement("video");r.srcObject=o[e.id].stream,r.id=e.id,r.autoplay=!0,i&&(r.muted=!0),s.append(r)}s(o)},removeVideo:function(e,t,i){delete t[e];const o=document.getElementById(e);o&&o.remove(),i(t)},initializePeerConnection:()=>{return new Peer({secure:!0,iceTransportPolicy:"all",host:"imarkpeerserver.herokuapp.com",port:443,config:{iceServers:[{urls:["stun:bn-turn1.xirsys.com"]},{username:"imark",credential:"imark@123",urls:["turn:134.209.145.160:3478"]}]}})},initializeSocketConnection:()=>{return io.connect("https://herokuvserver.herokuapp.com/",{forceNew:!0})}}}
